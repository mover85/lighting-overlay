{"mappings":"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","sources":["src/extension/index.js","src/extension/util/nodecg-api-context.js","src/extension/twitter.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/extension/nowplaying.js"],"sourcesContent":["'use strict';\n\n// Ours\nimport nodecgApiContext from './util/nodecg-api-context';\nimport twitter from './twitter';\nimport nowplaying from './nowplaying';\n\nexport default (nodecg) => {\n  // Store a reference to this nodecg API context in a place where other libs can easily access it.\n  // This must be done beforeu any other files are `require`d.\n  nodecgApiContext.set(nodecg);\n\n  nowplaying(nodecg);\n  twitter(nodecg);\n};\n","'use strict';\n\nlet context;\nmodule.exports = {\n\tget() {\n\t\treturn context;\n\t},\n\tset(ctx) {\n\t\tcontext = ctx;\n\t}\n};\n","/* eslint-disable camelcase */\nimport { TwitterApi, ETwitterApiError, ETwitterStreamEvent } from 'twitter-api-v2';\nimport queue from 'queue';\nimport twemoji from 'twemoji';\nimport { autop } from '@wordpress/autop';\nimport * as filter from 'leo-profanity';\n\nconst HASHTAG = '#millarstlights';\n\nconst handleError = (e) => {\n  // e is either a TwitterApiRequestError or a TwitterApiError\n  if (e.type === ETwitterApiError.Request) {\n    // Thrown if request fails (network error).\n    throw new Error(`Request failed. ${e.requestError}`);\n  } else if (e.type === ETwitterApiError.Response) {\n    // Thrown if Twitter responds with a bad HTTP status\n    throw new Error(`Twitter didn't accept your request. HTTP code: ${e.code}`);\n  }\n};\n\nclass Stream {\n  constructor(nodecg) {\n    this.stream = null;\n    this.nodecg = nodecg;\n    this.twitter = null;\n    this.durationTimer = false;\n    this.currentCallback = null;\n    this.debug = false;\n\n    this.streamPaused = nodecg.Replicant('streamPaused', {\n      defaultValue: true,\n      persistent: false,\n    });\n    this.streamConnected = nodecg.Replicant('streamConnected', {\n      defaultValue: false,\n      persistent: false,\n    });\n    this.tweetShowing = nodecg.Replicant('tweetShowing', {\n      defaultValue: false,\n      persistent: false,\n    });\n    this.tweetHold = nodecg.Replicant('tweetHold', {\n      defaultValue: false,\n      persistent: false,\n    });\n    this.tweetDuration = nodecg.Replicant('tweetDuration', {\n      defaultValue: 10,\n      persistent: true,\n    });\n    this.tweet = nodecg.Replicant('tweet', {\n      defaultValue: {\n        avatarUrl: '',\n        name: '',\n        screenName: '',\n        createdAt: null,\n        id: null,\n        images: [],\n      },\n    });\n\n    if (this.nodecg.bundleConfig.twitter?.debug === true) {\n      this.nodecg.log.info(`${this.nodecg.bundleName} is in debug mode, using hashtag #cat`);\n      this.debug = true;\n    }\n\n    this.queue = queue({\n      concurrency: 1,\n      autostart: true,\n    });\n\n    this.login()\n      .then(() => this.setRules())\n      .catch((e) => nodecg.log.error(e));\n  }\n\n  async login() {\n    const consumer = new TwitterApi({\n      appKey: this.nodecg.bundleConfig.twitter.consumerKey,\n      appSecret: this.nodecg.bundleConfig.twitter.consumerSecret,\n    });\n\n    try {\n      this.twitter = await consumer.appLogin();\n    } catch (e) {\n      handleError(e);\n    }\n  }\n\n  async setRules() {\n    if (!this.twitter) {\n      throw new Error('Twitter API not initialized.');\n    }\n\n    // Erase previous rules\n    try {\n      const rules = await this.twitter.v2.streamRules();\n      if (rules.data?.length) {\n        await this.twitter.v2.updateStreamRules({\n          delete: { ids: rules.data.map((rule) => rule.id) },\n        });\n      }\n    } catch (e) {\n      handleError(e);\n    }\n\n    // Add my search rule\n    try {\n      await this.twitter.v2.updateStreamRules({\n        add: [{ value: this.debug ? '#cat' : HASHTAG, tag: 'lighting hashtag' }],\n      });\n    } catch (e) {\n      handleError(e);\n    }\n  }\n\n  async start() {\n    if (this.streamConnected.value) {\n      return;\n    }\n\n    if (!this.twitter) {\n      throw new Error('Twitter API not initialized.');\n    }\n\n    try {\n      // For example, can be any stream function\n      this.stream = await this.twitter.v2.searchStream({\n        'tweet.fields': ['author_id', 'text', 'id', 'created_at', 'entities'],\n        'user.fields': ['name', 'username', 'profile_image_url'],\n        'media.fields': ['type', 'url', 'preview_image_url'],\n        expansions: ['attachments.media_keys', 'author_id'],\n      });\n      this.stream.autoReconnect = true;\n\n      this.nodecg.log.info('Connection has been opened.');\n      this.streamPaused.value = false;\n      this.streamConnected.value = true;\n      this.queue.start();\n      this.listen();\n    } catch (e) {\n      handleError(e);\n    }\n  }\n\n  listen() {\n    if (!this.stream) {\n      throw new Error('Twitter Stream not initialized.');\n    }\n\n    this.nodecg.log.info('Listening for tweets.');\n\n    // Awaits for a tweet\n    this.stream.on(\n      // Emitted when Node.js {response} emits a 'error' event (contains its payload).\n      ETwitterStreamEvent.ConnectionError,\n      (err) => {\n        this.streamConnected.value = false;\n        this.nodecg.log.error('Connection error!', err);\n      },\n    );\n\n    this.stream.on(\n      // Emitted when Node.js {response} is closed by remote or using .close().\n      ETwitterStreamEvent.ConnectionClosed,\n      () => {\n        this.streamConnected.value = false;\n        this.nodecg.log.info('Connection has been closed.');\n      },\n    );\n\n    this.stream.on(\n      // Emitted when a Twitter payload (a tweet or not, given the endpoint).\n      ETwitterStreamEvent.Data,\n      (event) => {\n        if (this.queue.length > 20) {\n          this.nodecg.log.debug('Tweet queue limit exceeded.');\n          return;\n        }\n\n        this.nodecg.log.debug('Tweet received.');\n        this.processMessage(event);\n      },\n    );\n\n    this.stream.on(\n      // Emitted when a Twitter sent a signal to maintain connection active\n      ETwitterStreamEvent.DataKeepAlive,\n      () => this.nodecg.log.info('Twitter has sent a keep-alive packet.'),\n    );\n  }\n\n  stop() {\n    if (!this.streamConnected.value) {\n      return;\n    }\n    this.stream.close();\n  }\n\n  pause() {\n    if (this.streamPaused.value || this.tweetHold.value) {\n      return;\n    }\n    this.nodecg.log.info('Queue has been paused.');\n    this.streamPaused.value = true;\n    this.queue.stop();\n  }\n\n  resume() {\n    if (!this.streamPaused.value || this.tweetHold.value) {\n      return;\n    }\n    this.nodecg.log.info('Queue has been resumed.');\n    this.streamPaused.value = false;\n    this.queue.start();\n  }\n\n  showTweet(tweet, cb) {\n    // Don't stack pulses\n    if (this.tweetShowing.value) {\n      return;\n    }\n\n    this.currentCallback = cb;\n    this.tweet.value = tweet;\n    this.tweetShowing.value = true;\n\n    if (this.tweetHold.value) {\n      return;\n    }\n\n    this.hideTweet();\n  }\n\n  hideTweet() {\n    // Don't stack pulses\n    if (!this.tweetShowing.value) {\n      return;\n    }\n\n    if (this.tweetHold.value) {\n      this.tweetShowing.value = false;\n\n      setTimeout(() => {\n        this.currentCallback();\n      }, 3 * 1000);\n      return;\n    }\n\n    // End pulse after \"duration\" seconds\n    this.durationTimer = setTimeout(() => {\n      this.tweetShowing.value = false;\n\n      setTimeout(() => {\n        this.currentCallback();\n      }, 3 * 1000);\n    }, this.tweetDuration.value * 1000);\n  }\n\n  toggle(isActive) {\n    if (this.tweetHold.value === isActive) {\n      return;\n    }\n\n    if (isActive) {\n      this.nodecg.log.info('Tweet is now on hold.');\n      if (this.tweetShowing.value && this.durationTimer) {\n        clearTimeout(this.durationTimer);\n        this.durationTimer = false;\n      }\n    } else {\n      this.nodecg.log.info('Tweet is now not on hold.');\n      this.hideTweet();\n    }\n\n    this.tweetHold.value = isActive;\n  }\n\n  processMessage(tweet) {\n    let msg = tweet.data.text;\n    let user = {};\n\n    if (filter.check(msg)) {\n      return false;\n    }\n\n    // Parse mentions\n    tweet.includes.users.forEach((usr) => {\n      if (usr.id === tweet.data.author_id) {\n        user = usr;\n      }\n    });\n\n    const formattedData = {\n      avatarUrl: user.profile_image_url,\n      name: user.username,\n      screenName: user.name,\n      createdAt: tweet.data.created_at,\n      id: tweet.data.id,\n    };\n\n    // Parse mentions\n    tweet.data.entities?.mentions?.reverse().forEach((mention) => {\n      const { start, end } = mention;\n      /* eslint-disable prefer-template */\n      msg = msg.substring(0, start)\n        + `<span class=\"link\">${msg.substring(start, end + 1)}</span>`\n        + msg.substring(end + 1);\n      /* eslint-enable prefer-template */\n    });\n\n    // Parse emoji\n    msg = twemoji.parse(msg);\n\n    // Parse URLs\n    tweet.data.entities?.urls?.forEach((url) => {\n      msg = msg.split(url.url).join(`<span class=\"link\">${url.display_url}</span>`);\n    });\n\n    // Parse hashtags\n    tweet.data.entities?.hashtags?.sort((a, b) => b.tag.length - a.tag.length)\n      .forEach((hashtag) => {\n        if (hashtag.tag.toLowerCase() === 'millarstlights') {\n          msg = msg.split(`#${hashtag.tag}`).join(`<span class=\"link purple\">#${hashtag.tag}</span>`);\n        } else {\n          msg = msg.split(`#${hashtag.tag}`).join(`<span class=\"link\">#${hashtag.tag}</span>`);\n        }\n      });\n\n    // Parse media (esp. images)\n    const images = [];\n\n    tweet.includes.media?.forEach((medium) => {\n      if (medium.type === 'photo') {\n        images.push(`${medium.url}:large`);\n        msg = msg.split(medium.url).join('');\n      } else {\n        msg = msg.split(medium.url).join(`<span class=\"link\">${medium.url}</span>`);\n      }\n    });\n\n    formattedData.images = images;\n    formattedData.body = autop(msg);\n\n    const job = (cb) => {\n      this.showTweet(formattedData, cb);\n    };\n    this.queue.push(job);\n    this.nodecg.log.debug(`Tweet added to queue at index ${this.queue.length}`);\n\n    return true;\n  }\n}\n\nexport default (nodecg) => {\n  if (!nodecg.bundleConfig || typeof nodecg.bundleConfig.twitter === 'undefined') {\n    nodecg.log.error(`\"twitter\" is not defined in cfg/${nodecg.bundleName}.json! `\n      + 'This object contains other properties that are required for the Twitter graphic to function.');\n    return;\n  }\n\n  const twitter = new Stream(nodecg);\n\n  nodecg.listenFor('startTweetStream', () => twitter.start());\n\n  nodecg.listenFor('stopTweetStream', () => twitter.stop());\n\n  nodecg.listenFor('pauseTweetStream', () => twitter.pause());\n\n  nodecg.listenFor('resumeTweetStream', () => twitter.resume());\n\n  nodecg.listenFor('holdTweetToggle', (isActive) => twitter.toggle(isActive));\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","export default (nodecg) => {\n  const nowPlayingPaused = nodecg.Replicant('nowPlayingPaused', {\n    defaultValue: false,\n    persistent: false,\n  });\n  const nowPlayingShowing = nodecg.Replicant('nowPlayingShowing', {\n    defaultValue: false,\n    persistent: false,\n  });\n  const nowPlaying = nodecg.Replicant('nowPlaying', {\n    defaultValue: {\n      artUrl: '',\n      title: '',\n      artist: '',\n      album: '',\n    },\n    persistent: false,\n  });\n  const albumart = nodecg.Replicant('assets:albumart', {\n    defaultValue: [],\n    persistent: false,\n  });\n\n  let pulseTimeout;\n\n  const pulse = () => {\n    // Don't stack pulses\n    if (nowPlayingShowing.value || nowPlayingPaused.value) {\n      return;\n    }\n\n    nowPlayingShowing.value = true;\n\n    // Hard-coded 12 second duration\n    pulseTimeout = setTimeout(() => {\n      nowPlayingShowing.value = false;\n    }, 12 * 1000);\n  };\n\n  nodecg.listenFor('toggleNowPlaying', (isActive) => {\n    if (nowPlayingPaused.value === isActive) {\n      return;\n    }\n\n    if (isActive) {\n      nodecg.log.info('NowPlaying is now paused.');\n    } else {\n      nodecg.log.info('NowPlaying has now resumed.');\n    }\n\n    nowPlayingPaused.value = isActive;\n  });\n\n  nodecg.listenFor('nowPlaying', (track) => {\n    const imgData = albumart.value.filter(\n      (value) => value.name === track.album.toLowerCase()\n        .replaceAll(' ', '_'),\n    );\n\n    let artUrl = '';\n    if (imgData.length) {\n      nodecg.log.debug(`Found image for ${track.album}.`);\n      artUrl = imgData[0].url;\n    }\n\n    nowPlaying.value = {\n      ...track,\n      artUrl,\n    };\n\n    // If the graphic is already showing, end it prematurely and show the new song\n    if (nowPlayingShowing.value) {\n      clearTimeout(pulseTimeout);\n      nowPlayingShowing.value = false;\n    }\n\n    // Show the graphic\n    pulse();\n  });\n};\n"],"names":["parcelHelpers","require","_nodecgApiContext","_twitter","_nowplaying","nodecg","_nodecgApiContextDefault","default","set","_nowplayingDefault","_twitterDefault","context","module","exports","get","ctx","_twitterApiV2","_queue","_twemoji","_autop","_leoProfanity","handleError","e","type","ETwitterApiError","Request","Error","requestError","Response","code","Stream","constructor","this","stream","twitter","durationTimer","currentCallback","debug","streamPaused","Replicant","defaultValue","persistent","streamConnected","tweetShowing","tweetHold","tweetDuration","tweet","avatarUrl","name","screenName","createdAt","id","images","bundleConfig","log","info","bundleName","queue","_queueDefault","concurrency","autostart","login","then","setRules","catch","error","async","consumer","TwitterApi","appKey","consumerKey","appSecret","consumerSecret","appLogin","rules","v2","streamRules","data","length","updateStreamRules","delete","ids","map","rule","add","value","tag","e1","searchStream","expansions","autoReconnect","start","listen","on","ETwitterStreamEvent","ConnectionError","err","ConnectionClosed","Data","event","processMessage","DataKeepAlive","stop","close","pause","resume","showTweet","cb","hideTweet","setTimeout","toggle","isActive","clearTimeout","msg","text","user","check","includes","users","forEach","usr","author_id","formattedData","profile_image_url","username","created_at","entities","mentions","reverse","mention","end","substring","_twemojiDefault","parse","urls","url","split","join","display_url","hashtags","sort","a","b","hashtag","toLowerCase","media","medium","push","body","autop","listenFor","interopDefault","__esModule","defineInteropFlag","Object","defineProperty","exportAll","source","dest","keys","key","hasOwnProperty","enumerable","export","destName","nowPlayingPaused","nowPlayingShowing","nowPlaying","artUrl","title","artist","album","albumart","pulseTimeout","track","imgData","filter","replaceAll"],"version":3,"file":"index.js.map","sourceRoot":"../"}