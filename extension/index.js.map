{"mappings":"6JAEA,IAAIA,EACJC,EAAc,CACbC,IAAG,IACKF,EAERG,IAAIC,GACHJ,EAAUI,UCDNC,cACOC,QACNC,OAAS,UACTD,OAASA,OACTE,QAAU,UACVC,eAAgB,OAChBC,gBAAkB,UAElBC,aAAeL,EAAOM,UAAS,eAAe,CAClDC,cAAc,EACdC,YAAY,SAERC,gBAAkBT,EAAOM,UAAS,kBAAkB,CACxDC,cAAc,EACdC,YAAY,SAERE,aAAeV,EAAOM,UAAS,eAAe,CAClDC,cAAc,EACdC,YAAY,SAERG,UAAYX,EAAOM,UAAS,YAAY,CAC5CC,cAAc,EACdC,YAAY,SAERI,cAAgBZ,EAAOM,UAAS,gBAAgB,CACpDC,aAAc,GACdC,YAAY,SAERK,MAAQb,EAAOM,UAAS,QAAQ,CAAGC,aAAY,UAE/CO,MAAQC,EAAAC,EAAAD,CAAK,CACjBE,YAAa,EACbC,WAAW,SAGPC,QACJC,MAAI,IAAAC,KAAYC,aAChBC,OAAOC,GAAMxB,EAAOyB,IAAIC,MAAMF,KAGhCG,YAAYH,GAEX,GAAIA,EAAEI,OAASC,EAAAC,iBAAiBC,QAE/B,MAAM,IAAIC,MAAK,mBAAsBR,EAAES,cAEnC,GAAIT,EAAEI,OAASC,EAAAC,iBAAiBI,SAEpC,MAAM,IAAIF,MAAK,kDAEdR,EAAEW,oBAMJ,MAAMC,EAAW,IAAIP,EAAAQ,WAAU,CAC9BC,OAAMjB,KAAOrB,OAAOuC,aAAarC,QAAQsC,YACzCC,UAASpB,KAAOrB,OAAOuC,aAAarC,QAAQwC,0BAIvCxC,cAAgBkC,EAASO,WAC9B,MAAOnB,QACFG,YAAYH,qBAKlB,IAAEH,KAAQnB,QACT,MAAM,IAAI8B,MAAK,oCAKf,MAAMY,QAAKvB,KAAcnB,QAAQ2C,GAAGC,cAChCF,EAAMG,MAAMC,cAAM3B,KACVnB,QAAQ2C,GAAGI,kBAAiB,CACtCC,OAAM,CAAIC,IAAKP,EAAMG,KAAKK,KAAIC,GAAQA,EAAKC,QAG7C,MAAO9B,QACFG,YAAYH,kBAKNtB,QAAQ2C,GAAGI,kBAAiB,CACtCM,IAAG,QAAW,sBAA0B,uBAEzC,MAAO/B,QACFG,YAAYH,kBAKlB,IAAEH,KAAOZ,gBAAgB+C,MAAzB,CAIA,IAAEnC,KAAQnB,QACT,MAAM,IAAI8B,MAAK,yCAKV/B,aAAMoB,KAAcnB,QAAQ2C,GAAGY,aAAY,gBACjC,gEACD,uDACC,8CACF,8CAERxD,OAAOyD,eAAgB,OAEvB1D,OAAOyB,IAAIkC,KAAI,oCACftD,aAAamD,OAAQ,OACrB/C,gBAAgB+C,OAAQ,OACxB1C,MAAM8C,aACNC,SACL,MAAQrC,QACHG,YAAYH,KAInBqC,SACC,IAAExC,KAAQpB,OACT,MAAM,IAAI+B,MAAK,wCAGXhC,OAAOyB,IAAIkC,KAAI,8BAGf1D,OAAO6D,GAEXjC,EAAAkC,oBAAoBC,iBACpBC,SACMxD,gBAAgB+C,OAAQ,OACxBxD,OAAOyB,IAAIC,MAAK,oBAAsBuC,WAIxChE,OAAO6D,GAEXjC,EAAAkC,oBAAoBG,kBAAgB,UAE9BzD,gBAAgB+C,OAAQ,OACxBxD,OAAOyB,IAAIkC,KAAI,uCAIjB1D,OAAO6D,GAEXjC,EAAAkC,oBAAoBI,MACpBC,IACC,GAAE/C,KAAOP,MAAMkC,OAAS,GAAE,OAI1B,MAAMnC,EAAKQ,KAAQgD,eAAeD,QAI7BtD,MAAMwD,MAHEC,SACPC,UAAU3D,EAAO0D,cAMpBtE,OAAO6D,GAEXjC,EAAAkC,oBAAoBU,eAAa,IAAApD,KACtBrB,OAAOyB,IAAIkC,KAAI,2CAI5Be,OACGrD,KAAQZ,gBAAgB+C,YAGrBvD,OAAO0E,QAGbC,QACGvD,KAAOhB,aAAamD,OAAKnC,KAASV,UAAU6C,aAGzCxD,OAAOyB,IAAIkC,KAAI,+BACftD,aAAamD,OAAQ,OACrB1C,MAAM4D,QAGZG,SACGxD,KAAQhB,aAAamD,QAAKnC,KAASV,UAAU6C,aAG1CxD,OAAOyB,IAAIkC,KAAI,gCACftD,aAAamD,OAAQ,OACrB1C,MAAM8C,SAGZY,UAAU3D,EAAO0D,GAEdlD,KAAOX,aAAa8C,aAIjBpD,gBAAkBmE,OAClB1D,MAAM2C,MAAQ3C,OACdH,aAAa8C,OAAQ,EAExBnC,KAAOV,UAAU6C,YAIdsB,aAGNA,YAEC,GAAEzD,KAAQX,aAAa8C,MAIvB,OAAEnC,KAAOV,UAAU6C,YACb9C,aAAa8C,OAAQ,OAE1BuB,YAAU,UACJ3E,oBACH,gBAKCD,cAAgB4E,YAAU,UACzBrE,aAAa8C,OAAQ,EAE1BuB,YAAU,UACJ3E,oBACH,OAC0B,IAA7BiB,KAAOT,cAAc4C,QAGvBwB,OAAOC,GACJ5D,KAAOV,UAAU6C,QAAUyB,IAIzBA,QACEjF,OAAOyB,IAAIkC,KAAI,yBAClBtC,KAAOX,aAAa8C,OAAKnC,KAASlB,gBACnC+E,aAAY7D,KAAMlB,oBACbA,eAAgB,UAGjBH,OAAOyB,IAAIkC,KAAI,kCACfmB,kBAGDnE,UAAU6C,MAAQyB,GAGxBZ,eAAexD,GACb,IAAIsE,EAAMtE,EAAMkC,KAAKqC,KACjBC,EAAI,GAGRxE,EAAMyE,SAASC,MAAMC,SAAQC,IACxBA,EAAInC,KAAOzC,EAAMkC,KAAK2C,YACzBL,EAAOI,MAIT,MAAME,EAAa,CAClBC,UAAWP,EAAKQ,kBAChBC,KAAMT,EAAKU,SACXC,WAAYX,EAAKS,KACjBG,UAAWpF,EAAMkC,KAAKmD,WACtB5C,GAAIzC,EAAMkC,KAAKO,IAIhBzC,EAAMkC,KAAKoD,UAAUC,UAAUC,UAAUb,SAAQc,IAChD,MAAM1C,EAAQ0C,EAAQ1C,MAChB2C,EAAMD,EAAQC,IAEpBpB,EAAMA,EAAIqB,UAAU,EAAG5C,GAAK,sBACLuB,EAAIqB,UAAU5C,EAAO2C,EAAM,YACjDpB,EAAIqB,UAAUD,EAAM,MAKtBpB,EAAMpE,EAAA0F,GAAQC,MAAMvB,GAGpBtE,EAAMkC,KAAKoD,UAAUQ,MAAMnB,SAAQoB,IAClCzB,EAAMA,EAAI0B,MAAMD,EAAIA,KAAKE,KAAI,sBAAuBF,EAAIG,yBAIzDlG,EAAMkC,KAAKoD,UAAUa,UAAUC,MAAI,CAAEC,EAAGC,IAChCA,EAAEC,IAAIpE,OAASkE,EAAEE,IAAIpE,SAC1BwC,SAAQ6B,IAETlC,EAD0B,mBAAvBkC,EAAQD,IAAIE,cACTnC,EAAI0B,MAAK,IAAKQ,EAAQD,OAAON,KAAI,8BAA+BO,EAAQD,cAExEjC,EAAI0B,MAAK,IAAKQ,EAAQD,OAAON,KAAI,uBAAwBO,EAAQD,iBAKzE,MAAMG,EAAM,UAEZ1G,EAAMyE,SAASkC,OAAOhC,SAAQiC,IACd,UAAXA,EAAO7F,MACV2F,EAAOjD,KAAKmD,EAAOb,IAAG,UACtBzB,EAAMA,EAAI0B,MAAMY,EAAOb,KAAKE,KAAI,KAEhC3B,EAAMA,EAAI0B,MAAMY,EAAOb,KAAKE,KAAI,sBAAuBW,EAAOb,iBAIhEjB,EAAc4B,OAASA,EACvB5B,EAAc+B,KAAOC,EAAAC,MAAMzC,GAEpBQ,OCxUVkC,EAAgB7H,IACf,MAAM8H,EAAmB9H,EAAOM,UAAS,mBAAmB,CAC3DC,cAAc,EACdC,YAAY,IAEPuH,EAAoB/H,EAAOM,UAAS,oBAAoB,CAC7DC,cAAc,EACdC,YAAY,IAEPwH,EAAahI,EAAOM,UAAS,aAAa,CAC/CC,aAAY,GACZC,YAAY,IAEPyH,EAAWjI,EAAOM,UAAS,kBAAkB,CAClDC,aAAY,GACZC,YAAY,IAGb,IAAI0H,EAgBJlI,EAAOmI,UAAS,oBAAsBlD,IACjC6C,EAAiBtE,QAAUyB,IAI3BA,EACHjF,EAAOyB,IAAIkC,KAAI,6BAEf3D,EAAOyB,IAAIkC,KAAI,+BAGhBmE,EAAiBtE,MAAQyB,MAG1BjF,EAAOmI,UAAS,cAAgBC,IAC/B,MAAMC,EAAUJ,EAASzE,MAAM8E,QAC7B9E,GAAUA,EAAMsC,OAASsC,EAAMG,MAAMjB,cACpCkB,WAAU,IAAI,OAGjB,IAAIC,EAAM,GACNJ,EAAQrF,SACXhD,EAAOyB,IAAIiH,MAAK,mBAAsBN,EAAMG,MAAK,KACjDE,EAASJ,EAAQ,GAAGzB,KAGrBoB,EAAWxE,MAAK,IACZ4E,SACHK,GAIGV,EAAkBvE,QACrB0B,aAAagD,GACbH,EAAkBvE,OAAQ,GA9CvBuE,EAAkBvE,OAASsE,EAAiBtE,QAIhDuE,EAAkBvE,OAAQ,EAG1B0E,EAAenD,YAAU,KACxBgD,EAAkBvE,OAAQ,IACxB,WC1BLmF,OAAAC,QAAkB5I,IAGjBe,EAAApB,GAAiBE,IAAIG,GAErB6H,EAAW7H,YFkUa6I,GACxB,IAAKA,EAAOtG,mBAAkD,IAA3BsG,EAAOtG,aAAarC,oBACtD2I,EAAOpH,IAAIC,MAAK,mCAAoCmH,EAAOC,iHAK5D,MAAM5I,EAAU,IAAIH,EAAO8I,GAE3BA,EAAOV,UAAS,oBAAmB,IAAQjI,EAAQ0D,UAEnDiF,EAAOV,UAAS,mBAAkB,IAAQjI,EAAQwE,SAElDmE,EAAOV,UAAS,oBAAmB,IAAQjI,EAAQ0E,UAEnDiE,EAAOV,UAAS,qBAAoB,IAAQjI,EAAQ2E,WAEpDgE,EAAOV,UAAS,mBAAqBlD,GAAa/E,EAAQ8E,OAAOC,KElVjE8D,CAAQ/I","sources":["src/extension/util/nodecg-api-context.js","src/extension/twitter.js","src/extension/nowplaying.js","src/extension/index.js"],"sourcesContent":["'use strict';\n\nlet context;\nmodule.exports = {\n\tget() {\n\t\treturn context;\n\t},\n\tset(ctx) {\n\t\tcontext = ctx;\n\t}\n};\n","/* eslint-disable camelcase */\n'use strict';\nimport { TwitterApi, ETwitterApiError, ETwitterStreamEvent } from 'twitter-api-v2';\nimport queue from 'queue';\nimport twemoji from 'twemoji';\nimport { autop } from '@wordpress/autop';\n\nclass Stream {\n\tconstructor(nodecg) {\n\t\tthis.stream = null;\n\t\tthis.nodecg = nodecg;\n\t\tthis.twitter = null;\n\t\tthis.durationTimer = false;\n\t\tthis.currentCallback = null;\n\n\t\tthis.streamPaused = nodecg.Replicant('streamPaused', {\n\t\t\tdefaultValue: true,\n\t\t\tpersistent: false\n\t\t});\n\t\tthis.streamConnected = nodecg.Replicant('streamConnected', {\n\t\t\tdefaultValue: false,\n\t\t\tpersistent: false\n\t\t});\n\t\tthis.tweetShowing = nodecg.Replicant('tweetShowing', {\n\t\t\tdefaultValue: false,\n\t\t\tpersistent: false\n\t\t});\n\t\tthis.tweetHold = nodecg.Replicant('tweetHold', {\n\t\t\tdefaultValue: false,\n\t\t\tpersistent: false\n\t\t});\n\t\tthis.tweetDuration = nodecg.Replicant('tweetDuration', {\n\t\t\tdefaultValue: 10,\n\t\t\tpersistent: true\n\t\t});\n\t\tthis.tweet = nodecg.Replicant('tweet', {defaultValue: {}});\n\t\n\t\tthis.queue = queue({\n\t\t\tconcurrency: 1,\n\t\t\tautostart: true,\n\t\t});\n\n\t\tthis.login()\n\t\t.then(() => this.setRules())\n\t\t.catch((e) => nodecg.log.error(e));\n\t};\n\n\thandleError(e) {\n\t\t// e is either a TwitterApiRequestError or a TwitterApiError\n\t\tif (e.type === ETwitterApiError.Request) {\n\t\t\t// Thrown if request fails (network error).\n\t\t\tthrow new Error('Request failed. ' + e.requestError);\n\t\t}\n\t\telse if (e.type === ETwitterApiError.Response) {\n\t\t\t// Thrown if Twitter responds with a bad HTTP status\n\t\t\tthrow new Error(\n\t\t\t\t'Twitter didn\\'t accept your request. HTTP code: ' +\n\t\t\t\te.code\n\t\t\t);\n\t\t}\n\t}\n\n\tasync login() {\n\t\tconst consumer = new TwitterApi({\n\t\t\tappKey: this.nodecg.bundleConfig.twitter.consumerKey,\n\t\t\tappSecret: this.nodecg.bundleConfig.twitter.consumerSecret,\n\t\t});\n\n\t\ttry {\n\t\t\tthis.twitter = await consumer.appLogin();\n\t\t} catch(e) {\n\t\t\tthis.handleError(e);\n\t\t};\n\t}\n\n\tasync setRules() {\n\t\tif (!this.twitter) {\n\t\t\tthrow new Error('Twitter API not initialized.');\n\t\t}\n\n\t\t// Erase previous rules\n\t\ttry {\n\t\t\tconst rules = await this.twitter.v2.streamRules();\n\t\t\tif (rules.data?.length) {\n\t\t\t\tawait this.twitter.v2.updateStreamRules({\n\t\t\t\t\tdelete: { ids: rules.data.map(rule => rule.id) },\n\t\t\t\t});\n\t\t\t}\n\t\t} catch(e) {\n\t\t\tthis.handleError(e);\n\t\t}\n\n\t\t// Add my search rule\n\t\ttry {\n\t\t\tawait this.twitter.v2.updateStreamRules({\n\t\t\t\tadd: [{'value': '#millarstlights', 'tag': 'lighting hashtag'}],\n\t\t\t});\n\t\t} catch(e) {\n\t\t\tthis.handleError(e);\n\t\t}\n\t}\n\n\tasync start() {\n\t\tif (this.streamConnected.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.twitter) {\n\t\t\tthrow new Error('Twitter API not initialized.');\n\t\t}\n\n\t\ttry {\n\t\t\t// For example, can be any stream function\n\t\t\tthis.stream = await this.twitter.v2.searchStream({\n\t\t\t\t'tweet.fields': ['author_id','text','id','created_at','entities'],\n\t\t\t\t'user.fields': ['name','username','profile_image_url'],\n\t\t\t\t'media.fields': ['type','url','preview_image_url'],\n\t\t\t\t'expansions': ['attachments.media_keys','author_id']\n\t\t\t});\n\t\t\tthis.stream.autoReconnect = true;\n\n\t\t\tthis.nodecg.log.info('Connection has been opened.');\n\t\t\tthis.streamPaused.value = false;\n\t\t\tthis.streamConnected.value = true;\n\t\t\tthis.queue.start();\n\t\t\tthis.listen();\n\t\t} catch (e) {\n\t\t\tthis.handleError(e);\n\t\t};\n\t}\n\n\tlisten() {\n\t\tif (!this.stream) {\n\t\t\tthrow new Error('Twitter Stream not initialized.');\n\t\t}\n\n\t\tthis.nodecg.log.info('Listening for tweets.');\n\n\t\t// Awaits for a tweet\n\t\tthis.stream.on(\n\t\t\t// Emitted when Node.js {response} emits a 'error' event (contains its payload).\n\t\t\tETwitterStreamEvent.ConnectionError,\n\t\t\terr => {\t\n\t\t\t\tthis.streamConnected.value = false;\n\t\t\t\tthis.nodecg.log.error('Connection error!', err)\n\t\t\t},\n\t\t);\n\n\t\tthis.stream.on(\n\t\t\t// Emitted when Node.js {response} is closed by remote or using .close().\n\t\t\tETwitterStreamEvent.ConnectionClosed,\n\t\t\t() => {\t\n\t\t\t\tthis.streamConnected.value = false;\n\t\t\t\tthis.nodecg.log.info('Connection has been closed.')\n\t\t\t},\n\t\t);\n\n\t\tthis.stream.on(\n\t\t\t// Emitted when a Twitter payload (a tweet or not, given the endpoint).\n\t\t\tETwitterStreamEvent.Data,\n\t\t\tevent => {\n\t\t\t\tif (this.queue.length > 20) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst tweet = this.processMessage(event);\n\t\t\t\tconst job = (cb) => {\n\t\t\t\t\tthis.showTweet(tweet, cb);\n\t\t\t\t};\n\t\t\t\tthis.queue.push(job);\n\t\t\t},\n\t\t);\n\n\t\tthis.stream.on(\n\t\t\t// Emitted when a Twitter sent a signal to maintain connection active\n\t\t\tETwitterStreamEvent.DataKeepAlive,\n\t\t\t() => this.nodecg.log.info('Twitter has sent a keep-alive packet.'),\n\t\t);\n\t}\n\n\tstop() {\n\t\tif (!this.streamConnected.value) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stream.close();\n\t};\n\n\tpause() {\n\t\tif (this.streamPaused.value || this.tweetHold.value) {\n\t\t\treturn;\n\t\t}\n\t\tthis.nodecg.log.info('Queue has been paused.');\n\t\tthis.streamPaused.value = true;\n\t\tthis.queue.stop();\n\t};\n\n\tresume() {\n\t\tif (!this.streamPaused.value || this.tweetHold.value) {\n\t\t\treturn;\n\t\t}\n\t\tthis.nodecg.log.info('Queue has been resumed.');\n\t\tthis.streamPaused.value = false;\n\t\tthis.queue.start();\n\t};\n\n\tshowTweet(tweet, cb) {\n\t\t// Don't stack pulses\n\t\tif (this.tweetShowing.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentCallback = cb;\n\t\tthis.tweet.value = tweet;\n\t\tthis.tweetShowing.value = true;\n\n\t\tif (this.tweetHold.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.hideTweet();\n\t};\n\n\thideTweet() {\n\t\t// Don't stack pulses\n\t\tif (!this.tweetShowing.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.tweetHold.value) {\n\t\t\tthis.tweetShowing.value = false;\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.currentCallback();\n\t\t\t}, 3 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\t// End pulse after \"duration\" seconds\n\t\tthis.durationTimer = setTimeout(() => {\n\t\t\tthis.tweetShowing.value = false;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.currentCallback();\n\t\t\t}, 3 * 1000);\n\t\t}, this.tweetDuration.value * 1000);\n\t};\n\n\ttoggle(isActive) {\n\t\tif (this.tweetHold.value === isActive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isActive) {\n\t\t\tthis.nodecg.log.info('Tweet is now on hold.');\n\t\t\tif (this.tweetShowing.value && this.durationTimer) {\n\t\t\t\tclearTimeout(this.durationTimer);\n\t\t\t\tthis.durationTimer = false;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.nodecg.log.info('Tweet is now not on hold.');\n\t\t\tthis.hideTweet();\n\t\t}\n\t\t\n\t\tthis.tweetHold.value = isActive;\n\t};\n\n\tprocessMessage(tweet) {\n\t\t\tlet msg = tweet.data.text;\n\t\t\tlet user = {};\n\n\t\t\t// Parse mentions\n\t\t\ttweet.includes.users.forEach(usr => {\n\t\t\t\tif (usr.id === tweet.data.author_id) {\n\t\t\t\t\tuser = usr;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst formattedData = {\n\t\t\t\tavatarUrl: user.profile_image_url,\n\t\t\t\tname: user.username,\n\t\t\t\tscreenName: user.name,\n\t\t\t\tcreatedAt: tweet.data.created_at,\n\t\t\t\tid: tweet.data.id\n\t\t\t};\n\n\t\t\t// Parse mentions\n\t\t\ttweet.data.entities?.mentions?.reverse().forEach(mention => {\n\t\t\t\tconst start = mention.start;\n\t\t\t\tconst end = mention.end;\n\t\t\t\t/* eslint-disable prefer-template */\n\t\t\t\tmsg = msg.substring(0, start) +\n\t\t\t\t\t`<span class=\"link\">${msg.substring(start, end + 1)}</span>` +\n\t\t\t\t\tmsg.substring(end + 1);\n\t\t\t\t/* eslint-enable prefer-template */\n\t\t\t});\n\n\t\t\t// Parse emoji\n\t\t\tmsg = twemoji.parse(msg);\n\n\t\t\t// Parse URLs\n\t\t\ttweet.data.entities?.urls?.forEach(url => {\n\t\t\t\tmsg = msg.split(url.url).join(`<span class=\"link\">${url.display_url}</span>`);\n\t\t\t});\n\n\t\t\t// Parse hashtags\n\t\t\ttweet.data.entities?.hashtags?.sort((a, b) => {\n\t\t\t\treturn b.tag.length - a.tag.length;\n\t\t\t}).forEach(hashtag => {\n\t\t\t\tif (hashtag.tag.toLowerCase() === 'millarstlights') {\n\t\t\t\t\tmsg = msg.split(`#${hashtag.tag}`).join(`<span class=\"link purple\">#${hashtag.tag}</span>`);\n\t\t\t\t} else {\n\t\t\t\t\tmsg = msg.split(`#${hashtag.tag}`).join(`<span class=\"link\">#${hashtag.tag}</span>`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Parse media (esp. images)\n\t\t\tconst images = [];\n\n\t\t\ttweet.includes.media?.forEach(medium => {\n\t\t\t\tif (medium.type === 'photo') {\n\t\t\t\t\timages.push(medium.url+':large');\n\t\t\t\t\tmsg = msg.split(medium.url).join('');\n\t\t\t\t} else {\n\t\t\t\t\tmsg = msg.split(medium.url).join(`<span class=\"link\">${medium.url}</span>`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tformattedData.images = images;\n\t\t\tformattedData.body = autop(msg);\n\n\t\t\treturn formattedData;\n\t}\n}\n\nexport default function (nodecg) {\n\tif (!nodecg.bundleConfig || typeof nodecg.bundleConfig.twitter === 'undefined') {\n\t\tnodecg.log.error(`\"twitter\" is not defined in cfg/${nodecg.bundleName}.json! ` +\n\t\t\t'This object contains other properties that are required for the Twitter graphic to function.');\n\t\treturn;\n\t}\n\n\tconst twitter = new Stream(nodecg);\n\n\tnodecg.listenFor('startTweetStream', () => twitter.start());\n\n\tnodecg.listenFor('stopTweetStream', () => twitter.stop());\n\n\tnodecg.listenFor('pauseTweetStream', () => twitter.pause());\n\n\tnodecg.listenFor('resumeTweetStream', () => twitter.resume());\n\n\tnodecg.listenFor('holdTweetToggle', (isActive) => twitter.toggle(isActive));\n};\n","'use strict';\n\nexport default (nodecg) => {\n\tconst nowPlayingPaused = nodecg.Replicant('nowPlayingPaused', {\n\t\tdefaultValue: false,\n\t\tpersistent: false\n\t});\n\tconst nowPlayingShowing = nodecg.Replicant('nowPlayingShowing', {\n\t\tdefaultValue: false,\n\t\tpersistent: false\n\t});\n\tconst nowPlaying = nodecg.Replicant('nowPlaying', {\n\t\tdefaultValue: {},\n\t\tpersistent: false\n\t});\n\tconst albumart = nodecg.Replicant('assets:albumart', {\n\t\tdefaultValue: [],\n\t\tpersistent: false\n\t});\n\n\tlet pulseTimeout;\n\n\tconst pulse = () => {\n\t\t// Don't stack pulses\n\t\tif (nowPlayingShowing.value || nowPlayingPaused.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tnowPlayingShowing.value = true;\n\n\t\t// Hard-coded 12 second duration\n\t\tpulseTimeout = setTimeout(() => {\n\t\t\tnowPlayingShowing.value = false;\n\t\t}, 12 * 1000);\n\t};\n\n\tnodecg.listenFor('toggleNowPlaying', (isActive) => {\n\t\tif (nowPlayingPaused.value === isActive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isActive) {\n\t\t\tnodecg.log.info('NowPlaying is now paused.');\n\t\t} else {\n\t\t\tnodecg.log.info('NowPlaying has now resumed.');\n\t\t}\n\n\t\tnowPlayingPaused.value = isActive;\n\t});\n\n\tnodecg.listenFor('nowPlaying', (track) => {\n\t\tconst imgData = albumart.value.filter(\n\t\t\t(value) => value.name === track.album.toLowerCase()\n\t\t\t\t.replaceAll(' ', '_')\n\t\t);\n\n\t\tlet artUrl = '';\n\t\tif (imgData.length) {\n\t\t\tnodecg.log.debug('Found image for ' + track.album + '.');\n\t\t\tartUrl = imgData[0].url;\n\t\t}\n\n\t\tnowPlaying.value = {\n\t\t\t...track,\n\t\t\tartUrl,\n\t\t};\n\n\t\t// If the graphic is already showing, end it prematurely and show the new song\n\t\tif (nowPlayingShowing.value) {\n\t\t\tclearTimeout(pulseTimeout);\n\t\t\tnowPlayingShowing.value = false;\n\t\t}\n\n\t\t// Show the graphic\n\t\tpulse();\n\t});\n\n};\n","'use strict';\n\n// Ours\nimport nodecgApiContext from './util/nodecg-api-context';\nimport twitter from './twitter';\nimport nowplaying from './nowplaying';\n\nmodule.exports = (nodecg) => {\n\t// Store a reference to this nodecg API context in a place where other libs can easily access it.\n\t// This must be done before any other files are `require`d.\n\tnodecgApiContext.set(nodecg);\n\n\tnowplaying(nodecg);\n\ttwitter(nodecg);\n};\n"],"names":["$63ec8b61dcff5deb$var$context","$63ec8b61dcff5deb$exports","get","set","ctx","$f48cb59c9ac4f18e$var$Stream","nodecg","stream","twitter","durationTimer","currentCallback","streamPaused","Replicant","defaultValue","persistent","streamConnected","tweetShowing","tweetHold","tweetDuration","tweet","queue","$parcel$interopDefault","$1N7vN$queue","concurrency","autostart","login","then","this","setRules","catch","e","log","error","handleError","type","$1N7vN$twitterapiv2","ETwitterApiError","Request","Error","requestError","Response","code","consumer","TwitterApi","appKey","bundleConfig","consumerKey","appSecret","consumerSecret","appLogin","rules","v2","streamRules","data","length","updateStreamRules","delete","ids","map","rule","id","add","value","searchStream","autoReconnect","info","start","listen","on","ETwitterStreamEvent","ConnectionError","err","ConnectionClosed","Data","event","processMessage","push","cb","showTweet","DataKeepAlive","stop","close","pause","resume","hideTweet","setTimeout","toggle","isActive","clearTimeout","msg","text","user","includes","users","forEach","usr","author_id","formattedData","avatarUrl","profile_image_url","name","username","screenName","createdAt","created_at","entities","mentions","reverse","mention","end","substring","$1N7vN$twemoji","parse","urls","url","split","join","display_url","hashtags","sort","a","b","tag","hashtag","toLowerCase","images","media","medium","body","$1N7vN$wordpressautop","autop","$673b470c5f79047b$export$9099ad97b570f7c","nowPlayingPaused","nowPlayingShowing","nowPlaying","albumart","pulseTimeout","listenFor","track","imgData","filter","album","replaceAll","artUrl","debug","module","exports","nodecg1","bundleName","$f48cb59c9ac4f18e$export$9099ad97b570f7c"],"version":3,"file":"index.js.map","sourceRoot":"../"}